<UserControl x:Class="devsko.LayoutAnalyzer.LayoutControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:s="clr-namespace:System;assembly=mscorlib"
             xmlns:imaging="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.Imaging"
             xmlns:theming="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Imaging"
             xmlns:util="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Utilities"
             xmlns:catalog="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.ImageCatalog"
             xmlns:local="clr-namespace:devsko.LayoutAnalyzer" xmlns:platformui="clr-namespace:Microsoft.Internal.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:analyzer="clr-namespace:devsko.LayoutAnalyzer;assembly=devsko.LayoutAnalyzer"
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="300"
             Name="LayoutWindow">

    <d:UserControl.DataContext>
        <analyzer:Layout />
    </d:UserControl.DataContext>

    <UserControl.Resources>

        <Style x:Key="PropertyLabelStyle" TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static local:LayoutControl.ForegroundKey}}"/>
            <Setter Property="Padding" Value="3,1,3,1"/>
            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static local:LayoutControl.TreeViewItemInactiveSelectedBackgroundKey}}" />
            <Setter Property="BorderThickness" Value="0,0,1,1" />
            <Setter Property="Grid.Column" Value="0" />
        </Style>
        <Style x:Key="PropertyLabelValueStyle" TargetType="{x:Type Label}" BasedOn="{StaticResource PropertyLabelStyle}">
            <Setter Property="BorderThickness" Value="0,0,0,1" />
            <Setter Property="Grid.Column" Value="1" />
        </Style>

        <SolidColorBrush x:Key="IdentifierForeground"   Color="{DynamicResource {x:Static local:LayoutControl.IdentifierForegroundColorKey}}" />
        <SolidColorBrush x:Key="ClassForeground"        Color="{DynamicResource {x:Static local:LayoutControl.ClassForegroundColorKey}}" />
        <SolidColorBrush x:Key="EnumForeground"         Color="{DynamicResource {x:Static local:LayoutControl.EnumForegroundColorKey}}" />
        <SolidColorBrush x:Key="StructForeground"       Color="{DynamicResource {x:Static local:LayoutControl.StructForegroundColorKey}}" />
        <SolidColorBrush x:Key="InterfaceForeground"    Color="{DynamicResource {x:Static local:LayoutControl.InterfaceForegroundColorKey}}" />
        <SolidColorBrush x:Key="KeywordForeground"      Color="{DynamicResource {x:Static local:LayoutControl.KeywordForegroundColorKey}}" />
        <SolidColorBrush x:Key="PunctuationForeground"  Color="{DynamicResource {x:Static local:LayoutControl.PunctuationForegroundColorKey}}" />
        <SolidColorBrush x:Key="OperatorForeground"     Color="{DynamicResource {x:Static local:LayoutControl.OperatorForegroundColorKey}}" />
        <SolidColorBrush x:Key="CommentForeground"      Color="{DynamicResource {x:Static local:LayoutControl.CommentForegroundColorKey}}" />

        <SolidColorBrush x:Key="IdentifierBackground"   Color="{DynamicResource {x:Static local:LayoutControl.IdentifierBackgroundColorKey}}" />
        <SolidColorBrush x:Key="ClassBackground"        Color="{DynamicResource {x:Static local:LayoutControl.ClassBackgroundColorKey}}" />
        <SolidColorBrush x:Key="EnumBackground"         Color="{DynamicResource {x:Static local:LayoutControl.EnumBackgroundColorKey}}" />
        <SolidColorBrush x:Key="StructBackground"       Color="{DynamicResource {x:Static local:LayoutControl.StructBackgroundColorKey}}" />
        <SolidColorBrush x:Key="InterfaceBackground"    Color="{DynamicResource {x:Static local:LayoutControl.InterfaceBackgroundColorKey}}" />
        <SolidColorBrush x:Key="KeywordBackground"      Color="{DynamicResource {x:Static local:LayoutControl.KeywordBackgroundColorKey}}" />
        <SolidColorBrush x:Key="PunctuationBackground"  Color="{DynamicResource {x:Static local:LayoutControl.PunctuationBackgroundColorKey}}" />
        <SolidColorBrush x:Key="OperatorBackground"     Color="{DynamicResource {x:Static local:LayoutControl.OperatorBackgroundColorKey}}" />
        <SolidColorBrush x:Key="CommentBackground"      Color="{DynamicResource {x:Static local:LayoutControl.CommentBackgroundColorKey}}" />

        <FontFamily x:Key="CodeFontFamily">Consolas</FontFamily>

        <Style x:Key="TreeViewStyle1" TargetType="{x:Type TreeView}">
            <Setter Property="Background" Value="{DynamicResource {x:Static local:LayoutControl.BackgroundKey}}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static local:LayoutControl.TreeViewItemInactiveSelectedBackgroundKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static local:LayoutControl.ForegroundKey}}"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeView}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ScrollViewer x:Name="_tv_scrollviewer_" Background="{TemplateBinding Background}" CanContentScroll="false" Focusable="false" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                                <ItemsPresenter/>
                            </ScrollViewer>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                                <Setter Property="CanContentScroll" TargetName="_tv_scrollviewer_" Value="true"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                    <Setter Property="ItemsPanel">
                        <Setter.Value>
                            <ItemsPanelTemplate>
                                <VirtualizingStackPanel/>
                            </ItemsPanelTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="TreeViewItemFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Stroke="{DynamicResource {x:Static local:LayoutControl.TreeViewItemInactiveSelectedBackgroundKey}}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="#FF595959"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="#FF262626"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="#FF27C7F7"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="#FFCCEEFB"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="#FF1CC4F7"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="#FF82DFFB"/>
        <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="#FF818181"/>
        <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Width" Value="16"/>
            <Setter Property="Height" Value="16"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
                            <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}" Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="RenderTransform" TargetName="ExpandPath">
                                    <Setter.Value>
                                        <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}"/>
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}"/>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsChecked" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}"/>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TreeViewItemStyle1" TargetType="{x:Type TreeViewItem}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Padding" Value="1,0,0,0"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static local:LayoutControl.ForegroundKey}}"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="19" Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}"/>
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                            <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="false">
                                <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="HasItems" Value="false">
                                <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                    <Setter Property="ItemsPanel">
                        <Setter.Value>
                            <ItemsPanelTemplate>
                                <VirtualizingStackPanel/>
                            </ItemsPanelTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <HierarchicalDataTemplate DataType="{x:Type analyzer:Layout}"
                                  ItemsSource="{Binding Path=FieldsAndPaddings}">
            <StackPanel Orientation="Horizontal"
                        Margin="0,3,0,3">
                <TextBlock Foreground="{StaticResource IdentifierForeground}"
                           FontFamily="{DynamicResource CodeFontFamily}"
                           Text="{Binding Path=Name.Value}" />
            </StackPanel>
        </HierarchicalDataTemplate>
        <HierarchicalDataTemplate DataType="{x:Type analyzer:Field}"
                                  ItemsSource="{Binding Path=FieldsAndPaddings}">
            <StackPanel Orientation="Horizontal"
                        Margin="0,3,0,3">
                <TextBlock Width="30"
                           TextAlignment="Right"
                           Text="{Binding Path=Offset}" />
                <TextBlock Width="30"
                           Padding="0,0,10,0"
                           TextAlignment="Right"
                           Text="{Binding Path=Size}" />
                <TextBlock Foreground="{StaticResource IdentifierForeground}"
                           FontFamily="{DynamicResource CodeFontFamily}"
                           Text="{Binding Path=TypeName.Value}" />
                <TextBlock Foreground="{StaticResource IdentifierForeground}"
                           FontFamily="{DynamicResource CodeFontFamily}"
                           Text="{Binding Path=Name}"
                           Padding="5,0,0,0" />
            </StackPanel>
        </HierarchicalDataTemplate>
        <DataTemplate DataType="{x:Type analyzer:Padding}">
            <StackPanel Orientation="Horizontal"
                        Margin="0,3,0,3">
                <TextBlock Width="30"
                           TextAlignment="Right"
                           Text="{Binding Path=Offset}" />
                <TextBlock Width="30"
                           Padding="0,0,10,0"
                           TextAlignment="Right"
                           Text="{Binding Path=Size}" />
                <TextBlock Foreground="{StaticResource CommentForeground}"
                           Background="{StaticResource CommentBackground}"
                           FontFamily="{DynamicResource CodeFontFamily}"
                           Text="/* === Padding === */" />
            </StackPanel>
        </DataTemplate>

    </UserControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Grid Grid.Row="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
            </Grid.RowDefinitions>
            <Label Grid.Row="0" Style="{StaticResource ResourceKey=PropertyLabelStyle}" Content="Runtime" />
            <Label Grid.Row="0" Style="{StaticResource ResourceKey=PropertyLabelValueStyle}" Content="{Binding Path=Runtime}" />
            <Label Grid.Row="1" Style="{StaticResource ResourceKey=PropertyLabelStyle}" Content="Type" />
            <Label Grid.Row="1" Style="{StaticResource ResourceKey=PropertyLabelValueStyle}" Content="{Binding Path=Name.Value}" />
            <Label Grid.Row="2" Style="{StaticResource ResourceKey=PropertyLabelStyle}" Content="Assembly" />
            <Label Grid.Row="2" Style="{StaticResource ResourceKey=PropertyLabelValueStyle}" Content="{Binding Path=AssemblyName}" />
            <Label Grid.Row="3" Style="{StaticResource ResourceKey=PropertyLabelStyle}" Content="Path" />
            <Label Grid.Row="3" Style="{StaticResource ResourceKey=PropertyLabelValueStyle}" Content="{Binding Path=AssemblyPath}" />
            <Label Grid.Row="4" Style="{StaticResource ResourceKey=PropertyLabelStyle}" Content="Total size" />
            <Label Grid.Row="4" Style="{StaticResource ResourceKey=PropertyLabelValueStyle}">
                <TextBlock Text="{Binding Path=TotalSize, StringFormat={}{0:N0} Bytes}" />
            </Label>
            <Label Grid.Row="5" Style="{StaticResource ResourceKey=PropertyLabelStyle}" Content="Total padding" />
            <Label Grid.Row="5" Style="{StaticResource ResourceKey=PropertyLabelValueStyle}">
                <TextBlock Text="{Binding Path=TotalPadding, StringFormat={}{0:N0} Bytes}" />
            </Label>
        </Grid>
        <TreeView Grid.Row="1"
                  x:Name="tree"
                  Background="{StaticResource IdentifierBackground}"
                  Style="{DynamicResource TreeViewStyle1}"
                  ItemContainerStyle="{DynamicResource TreeViewItemStyle1}" >
        </TreeView>
    </Grid>
</UserControl>
